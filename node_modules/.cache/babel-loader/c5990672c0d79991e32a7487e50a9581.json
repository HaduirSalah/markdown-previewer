{"ast":null,"code":"var _jsxFileName = \"E:\\\\Intern2Grow\\\\markdown-previewer\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { marked } from 'marked';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst STORAGE_KEY = 'markdown-content'; // Key for local storage\n\nconst useLocalStorage = initialValue => {\n  _s();\n\n  // Get from local storage then parse stored json or return initial value\n  const [value, setValue] = useState(() => {\n    try {\n      const item = localStorage.getItem(STORAGE_KEY);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error parsing JSON, return initial value\n      return initialValue;\n    }\n  }); // useEffect to store changes in local storage\n\n  useEffect(() => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(value));\n  }, [value]);\n  return [value, setValue];\n};\n\n_s(useLocalStorage, \"hfFW2iFXScSy/sYn3PA4isRh0hs=\");\n\nconst App = () => {\n  _s2();\n\n  const [code, setCode] = useLocalStorage('## Hello');\n  const [compiled, setCompiled] = useState(marked.parse(code));\n  const [hide, hidePreview] = useState(true);\n\n  const handleChange = e => {\n    setCode(e.target.value);\n    setCompiled(marked.parse(e.target.value));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MarkDown Previewer React App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => hidePreview(true),\n          className: \"btn\",\n          children: \"MarkDown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => hidePreview(false),\n          className: \"btn\",\n          children: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: true,\n          className: \"btn\",\n          children: \"Docs (API integration coming soon)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), hide ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: handleChange,\n          value: code\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: compiled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(App, \"sYkd3WecCcmOqQUU560BW1Bnye8=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/Intern2Grow/markdown-previewer/src/App.js"],"names":["React","useState","useEffect","marked","STORAGE_KEY","useLocalStorage","initialValue","value","setValue","item","localStorage","getItem","JSON","parse","error","setItem","stringify","App","code","setCode","compiled","setCompiled","hide","hidePreview","handleChange","e","target"],"mappings":";;;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAEA,MAAMC,WAAW,GAAG,kBAApB,C,CAAwC;;AAExC,MAAMC,eAAe,GAAIC,YAAD,IAAkB;AAAA;;AACxC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,MAAM;AACvC,QAAI;AACF,YAAMQ,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqBP,WAArB,CAAb;AACA,aAAOK,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAH,GAAsBH,YAAjC;AACD,KAHD,CAGE,OAAOQ,KAAP,EAAc;AACd;AACA,aAAOR,YAAP;AACD;AACF,GARiC,CAAlC,CAFwC,CAYxC;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAACK,OAAb,CAAqBX,WAArB,EAAkCQ,IAAI,CAACI,SAAL,CAAeT,KAAf,CAAlC;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACD,CAlBD;;GAAMH,e;;AAoBN,MAAMY,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,eAAe,CAAC,UAAD,CAAvC;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAACE,MAAM,CAACU,KAAP,CAAaK,IAAb,CAAD,CAAxC;AACA,QAAM,CAACI,IAAD,EAAOC,WAAP,IAAsBtB,QAAQ,CAAC,IAAD,CAApC;;AAEA,QAAMuB,YAAY,GAAIC,CAAD,IAAO;AAC1BN,IAAAA,OAAO,CAACM,CAAC,CAACC,MAAF,CAASnB,KAAV,CAAP;AACAc,IAAAA,WAAW,CAAClB,MAAM,CAACU,KAAP,CAAaY,CAAC,CAACC,MAAF,CAASnB,KAAtB,CAAD,CAAX;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAE,MAAMgB,WAAW,CAAC,IAAD,CAAlC;AAA0C,UAAA,SAAS,EAAC,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAQ,UAAA,OAAO,EAAE,MAAMA,WAAW,CAAC,KAAD,CAAlC;AAA2C,UAAA,SAAS,EAAC,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAQE;AAAQ,UAAA,QAAQ,MAAhB;AAAiB,UAAA,SAAS,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAYGD,IAAI,gBACH;AAAA,+BACE;AAAU,UAAA,QAAQ,EAAEE,YAApB;AAAkC,UAAA,KAAK,EAAEN;AAAzC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADG,gBAKH;AAAA,+BACE;AAAU,UAAA,KAAK,EAAEE;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AA2BD,CArCD;;IAAMH,G;UACoBZ,e;;;KADpBY,G;AAuCN,eAAeA,GAAf","sourcesContent":["import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { marked } from 'marked';\r\n\r\nconst STORAGE_KEY = 'markdown-content'; // Key for local storage\r\n\r\nconst useLocalStorage = (initialValue) => {\r\n  // Get from local storage then parse stored json or return initial value\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const item = localStorage.getItem(STORAGE_KEY);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error parsing JSON, return initial value\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // useEffect to store changes in local storage\r\n  useEffect(() => {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(value));\r\n  }, [value]);\r\n\r\n  return [value, setValue];\r\n};\r\n\r\nconst App = () => {\r\n  const [code, setCode] = useLocalStorage('## Hello');\r\n  const [compiled, setCompiled] = useState(marked.parse(code));\r\n  const [hide, hidePreview] = useState(true);\r\n\r\n  const handleChange = (e) => {\r\n    setCode(e.target.value);\r\n    setCompiled(marked.parse(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>MarkDown Previewer React App</h1>\r\n      <div className=\"container\">\r\n        <div className=\"btns\">\r\n          <button onClick={() => hidePreview(true)} className=\"btn\">\r\n            MarkDown\r\n          </button>\r\n          <button onClick={() => hidePreview(false)} className=\"btn\">\r\n            Preview\r\n          </button>\r\n\r\n          <button disabled className=\"btn\">Docs (API integration coming soon)</button>\r\n\r\n        </div>\r\n        {hide ? (\r\n          <div>\r\n            <textarea onChange={handleChange} value={code} />\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <textarea value={compiled} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}